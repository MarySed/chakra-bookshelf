// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Post {
  id        Int     @id @default(autoincrement())
  title     String
  content   String?
  published Boolean @default(false)
  author    User?   @relation(fields: [authorId], references: [id])
  authorId  Int?
}

model User {
  id            Int         @id @default(autoincrement())
  name          String?
  email         String?     @unique
  emailVerified DateTime?   @map(name: "email_verified")
  image         String?
  createdAt     DateTime    @default(now()) @map(name: "created_at")
  updatedAt     DateTime    @updatedAt @map(name: "updated_at")
  posts         Post[]
  bio           Bio?
  bookshelf     Bookshelf[]

  @@map(name: "users")
}

model Account {
  id                 Int       @id @default(autoincrement())
  compoundId         String    @unique @map(name: "compound_id")
  userId             Int       @map(name: "user_id")
  providerType       String    @map(name: "provider_type")
  providerId         String    @map(name: "provider_id")
  providerAccountId  String    @map(name: "provider_account_id")
  refreshToken       String?   @map(name: "refresh_token")
  accessToken        String?   @map(name: "access_token")
  accessTokenExpires DateTime? @map(name: "access_token_expires")
  createdAt          DateTime  @default(now()) @map(name: "created_at")
  updatedAt          DateTime  @default(now()) @map(name: "updated_at")


  @@index([providerAccountId], name: "providerAccountId")
  @@index([providerId], name: "providerId")
  @@index([userId], name: "userId")
  @@map(name: "accounts")
}

model Session {
  id           Int      @id @default(autoincrement())
  userId       Int      @map(name: "user_id")
  expires      DateTime
  sessionToken String   @unique @map(name: "session_token")
  accessToken  String   @unique @map(name: "access_token")
  createdAt    DateTime @default(now()) @map(name: "created_at")
  updatedAt    DateTime @default(now()) @map(name: "updated_at")

  @@map(name: "sessions")
}

model Bio {
  id      Int     @id @default(autoincrement())
  userId  Int?    @unique
  user    User?   @relation(fields: [userId], references: [id])
  content String?
}

model Book {
  id          Int        @id @default(autoincrement())
  authorId    Int?
  author      Author?    @relation(fields: [authorId], references: [id])
  title       String
  link        String
  image       String
  language    String?
  year        Int?
  country     String?
  pages       Int?
  bookshelfId Int?
  bookshelf   Bookshelf? @relation(fields: [bookshelfId], references: [id])
  review      Review[]
}

// Eh, honestly this isn't super necessary but I had the dream of creating a goodreads author page.
// Made names unique because of the seed file I decided to use. In a real life scenario I would not do this.
model Author {
  id        Int     @id @default(autoincrement())
  fullName  String  @unique @map(name: "full_name")
  firstName String? @map(name: "first_name")
  lastName  String? @map(name: "last_name")
  books     Book[]
}

// Rather than directly connecting users to book, we use a bookshelf.
model Bookshelf {
  id     Int    @id @default(autoincrement())
  name   String
  userId Int?
  user   User?  @relation(fields: [userId], references: [id])
  books  Book[]
}

// Book review. Note that this is different from Posts.
model Review {
  id      Int    @id @default(autoincrement())
  book    Book   @relation(fields: [bookId], references: [id])
  bookId  Int
  content String
}
